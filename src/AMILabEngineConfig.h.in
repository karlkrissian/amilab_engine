//
// C++ Interface: AMILabConfig
//
// Description:
//
//
// Author: Karl Krissian  <krissian@dis.ulpgc.es>, (C) 2009
//
// Copyright: See COPYING file that comes with this distribution
//
//

#pragma once

#ifndef _AMILabEngineConfig_h_
#define _AMILabEngineConfig_h_

#define AMILABENGINE_VERSION "@AMILABENGINE_VERSION@"

#cmakedefine HAVE_MALLOC_H 1

#cmakedefine AMI_USE_ZLIB

#cmakedefine AMI_USE_BZIP2

#cmakedefine AMI_USE_SSE

#cmakedefine AMI_USE_PRECOMP_HEADERS


class CMakeInfo
{
public:
  //major version number for CMake, e.g. the "2" in CMake 2.4.3
  static const char* ENGINE_VERSION()  { return "@AMILABENGINE_VERSION@"; }

  // CMAKE System and compiler information

  //major version number for CMake, e.g. the "2" in CMake 2.4.3
  static const char* CMAKE_MAJOR_VERSION()  { return "@CMAKE_MAJOR_VERSION@"; }
  
  //minor version number for CMake, e.g. the "4" in CMake 2.4.3
  static const char* CMAKE_MINOR_VERSION() { return "@CMAKE_MINOR_VERSION@"; }
  
  //patch version number for CMake, e.g. the "3" in CMake 2.4.3
  static const char* CMAKE_PATCH_VERSION() { return "@CMAKE_PATCH_VERSION@"; }
  
  //tweak version number for CMake, e.g. the "1" in CMake X.X.X.1. Releases use tweak < 20000000 and development versions use the date format CCYYMMDD for the tweak level.
  static const char* CMAKE_TWEAK_VERSION() { return "@CMAKE_TWEAK_VERSION@"; }
    
  //The version number combined, eg. 2.8.4.20110222-ged5ba for a Nightly build. or 2.8.4 for a Release build.
  static const char* CMAKE_VERSION() { return "@CMAKE_VERSION@"; }
  
  //the complete system name, e.g. "Linux-2.4.22", "FreeBSD-5.4-RELEASE" or "Windows 5.1"
  static const char* CMAKE_SYSTEM() { return "@CMAKE_SYSTEM@"; }
  
  //the short system name, e.g. "Linux", "FreeBSD" or "Windows"
  static const char* CMAKE_SYSTEM_NAME() { return "@CMAKE_SYSTEM_NAME@"; }
  
  //only the version part of CMAKE_SYSTEM
  static const char* CMAKE_SYSTEM_VERSION() { return "@CMAKE_SYSTEM_VERSION@"; }

  //the processor name (e.g. "Intel(R) Pentium(R) M processor 2.00GHz")
  static const char* CMAKE_SYSTEM_PROCESSOR() { return "@CMAKE_SYSTEM_PROCESSOR@"; }
  
  // the generator specified on the commandline.
  static const char* CMAKE_GENERATOR() { return "@CMAKE_GENERATOR@"; }
  
  //is TRUE on all UNIX-like OS's, including Apple OS X and CygWin
  static const char* UNIX() { return "@UNIX@"; }
  
  //is TRUE on Windows. Prior to 2.8.4 this included CygWin
  static const char* WIN32() { return "@WIN32@"; }
  
  //is TRUE on Apple systems. Note this does not imply the system is Mac OS X, only that __APPLE__ is #defined in C/C++ header files. Obtain more specific system information via CMAKE_SYSTEM_VERSION, i.e. IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin"), then it's Mac OS X.
  static const char* APPLE() { return "@APPLE@"; }

  //is TRUE when using the MinGW compiler in Windows
  static const char* MINGW() { return "@MINGW@"; }
  
  //is TRUE when using the MSYS developer environment in Windows
  static const char* MSYS() { return "@MSYS@"; }

  //is TRUE on Windows when using the CygWin version of cmake
  static const char* CYGWIN() { return "@CYGWIN@"; }
  
  //is TRUE on Windows when using a Borland compiler
  static const char* BORLAND() { return "@BORLAND@"; }
  
  //is TRUE on Windows when using the Open Watcom compiler
  static const char* WATCOM() { return "@WATCOM@"; }
  
  //Microsoft compiler
  //MSVC, MSVC_IDE, MSVC60, MSVC70, MSVC71, MSVC80, CMAKE_COMPILER_2005, MSVC90, MSVC10 (Visual Studio 2010) 
  
  //one of "Clang", "GNU", "Intel", or "MSVC". This works even if a compiler wrapper like ccache is used.
  static const char* CMAKE_C_COMPILER_ID() { return "@CMAKE_C_COMPILER_ID@"; }
  
  //one of "Clang", "GNU", "Intel", or "MSVC". This works even if a compiler wrapper like ccache is used.
  static const char* CMAKE_CXX_COMPILER_ID() { return "@CMAKE_CXX_COMPILER_ID@"; }
  
  //is TRUE if the compiler is a variant of gcc
  static const char* CMAKE_COMPILER_IS_GNUCC() { return "@CMAKE_COMPILER_IS_GNUCC@"; }
  
  //is TRUE if the compiler is a variant of g++
  static const char* CMAKE_COMPILER_IS_GNUCXX() { return "@CMAKE_COMPILER_IS_GNUCXX@"; }
  

};

#define AMI_BUILD_@AMI_BUILD_TYPE@

#ifdef _MSC_VER
  #define __func__ __FUNCTION__
  #define _CRT_SECURE_NO_WARNINGS
  // Disable warning messages 
  // conversion from 'double' to  ' float' warning (4244)
  // and warning about unsafe sprintf ... functions (4996)
  // conversion from/to unsigned char to/from bool (4800)
  // const qualifier ignored, for Variable<C_wrap_procedure> and Variable<C_wrap_varfunction> (4180)
  // warning 4275 se ha utilizado una interfaz no de DLL class 'WrapClassBase' 
  //    como base para la interfaz DLL class 'WrapClass<T>'
  // warning 4661  'BasicVariable::ptr WrapClass<T>::CreateVar(ParamList *,bool)
  //    no se ha proporcionado una definición adecuada para la solicitud de creación de instancias de plantillas explícitas
  // warning 4267: conversión de 'size_t' a 'int'; posible pérdida de datos
  #pragma warning( disable : 4244 4996 4800 4180 4305 4275 4661 4267 4996)

#endif

#endif // _AMILabEngineConfig_h_

