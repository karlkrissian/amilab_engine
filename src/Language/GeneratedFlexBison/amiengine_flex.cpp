#line 2 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/GeneratedFlexBison/amiengine_flex.cpp"

#line 4 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/GeneratedFlexBison/amiengine_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyipFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyipalloc (yy_size_t  );
void *yyiprealloc (void *,yy_size_t  );
void yyipfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 192
#define YY_END_OF_BUFFER 193
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[610] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  193,  191,  188,  190,  190,   29,  146,  177,
      191,   32,   38,   22,   34,   35,   26,   30,   40,   31,
       44,   28,  144,  144,   42,   43,   25,   33,   24,   41,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,   36,
      191,   37,   23,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  159,   39,  156,  148,  147,  155,  192,  176,
      173,  173,  160,  171,  176,  174,  175,  170,  162,  161,

      169,  192,  180,  179,  179,  192,   45,   47,  192,  190,
       21,  157,  158,    7,   16,    8,    5,   13,    3,   14,
        4,   15,   27,  178,    6,    0,  144,    0,    0,    0,
       12,   18,   20,   19,   11,    0,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,   74,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  189,
      189,    9,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  103,   95,   82,  187,  122,  187,  187,  187,

      187,  187,  187,  105,  187,  187,  187,  187,  187,  187,
      187,   96,  187,  187,  187,  187,   10,   17,  156,  154,
        0,  152,  153,  149,  151,  150,  173,  172,  170,  168,
        0,  166,  167,  163,  165,  164,  179,   47,   46,   46,
      143,    0,  143,  145,  184,    2,    1,    0,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,   55,  187,
      187,  187,  187,   65,  187,  187,  187,  187,   62,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,   68,
       87,  187,  187,  187,  187,  187,  187,   76,  136,  187,
      187,  187,  187,  187,   81,  187,   94,  187,  187,  187,

      187,  187,  187,   83,  187,  187,  187,  187,  187,  187,
      187,  187,   75,  187,  187,  187,  187,   77,  187,  187,
      187,  187,  187,    0,    0,  184,  186,   60,  187,   51,
      187,  187,  187,  187,  187,  187,  187,  120,  187,  187,
       58,  187,  187,  187,  187,  116,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,   56,  187,  187,   79,
      141,   78,   80,  187,  187,   84,  187,  104,  187,  187,
      129,  187,  187,  128,  187,  121,  119,  135,  187,   88,
      187,   91,  187,  117,  187,  187,  118,   85,  187,  187,
       86,   97,  187,  187,  127,   73,  187,    0,  143,    0,

      186,  187,   92,  187,  187,  187,   57,  187,  187,  187,
      187,  187,  187,  187,  187,  187,   53,  187,  187,  187,
      187,  187,  187,  187,   52,   59,  187,  187,  102,  187,
      187,  187,  187,   90,  187,   72,  123,  187,  187,   89,
      140,  187,    0,  101,  100,  185,  187,  187,   61,  187,
      187,  187,  187,  187,  187,  187,  187,   67,  187,  187,
       66,  187,  187,  187,  187,  187,  187,  187,   54,  187,
      187,  187,   98,  138,   69,    0,  187,  124,   93,   99,
      126,    0,  185,  187,  187,  133,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,

      187,  187,  187,  137,  187,    0,  187,    0,  187,  183,
      187,   64,  187,  187,  187,  187,  131,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
        0,  187,  181,  187,  183,   49,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  132,  187,
      187,  187,  142,  182,  187,  181,   71,  187,  187,  187,
      139,   48,  187,  187,  187,  187,  106,  187,  187,  187,
      187,  187,  187,  182,   70,  187,  187,  187,  187,  187,
      130,  107,  114,  187,  187,  187,  187,  187,   63,  187,
      187,  187,  187,  187,  187,  110,  109,  187,  125,   50,

      113,  187,  134,  115,  111,  108,  187,  112,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   22,   23,   24,
       25,   26,   27,    1,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   38,   38,   38,   38,
       50,   51,   52,   53,   54,    1,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   38,   80,   81,   82,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[83] =
    {   0,
        1,    1,    2,    2,    1,    2,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    1,    1,    4,
        4,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    1,
        2,    1,    1,    6,    5,    5,    5,    5,    5,    5,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    1,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[633] =
    {   0,
        0,    0,   80,   85,   90,   95,  100,  109,  107,  114,
      177,    0, 1255, 1256, 1256, 1256, 1251, 1228, 1256, 1256,
      101, 1227,   75, 1256, 1256, 1256, 1226,   80, 1256,  102,
     1236,  101,  242,  112, 1227, 1256,   99, 1223,  109, 1256,
     1230,  108,  244,  112,   73,  120,  247,  248,  249,  251,
      250,  123,  252,  253,  263,  264,  255,  128,  121, 1256,
      139, 1256, 1221,  269,  260,  261,  272,  268,  279,  267,
      288,  292,  295,  270,  265,  274,  321,  299,  333,  285,
      266,  338, 1256,  275,    0, 1256, 1256,    0,  354, 1256,
     1256, 1242, 1256, 1256, 1225, 1256, 1256,    0, 1256, 1256,

        0,  355, 1256, 1256, 1240, 1256, 1256,    0,  143, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1256, 1256, 1256, 1256, 1256,  135,  354,  361,    0,    0,
     1217, 1256, 1256, 1256, 1216, 1214, 1222,  131,  286,  140,
      349,  350,  256,  354,  366,  360,  367,  122,  372,  254,
      362,  136,  379,  271, 1221,  368,  375,  370,  374,  389,
      380,  377,  381,  384,  259,  399,  401,  386,  407, 1256,
     1234, 1256,  388,  390,  392,  403,  419,  424,  425,  427,
      428,  429,  433,  432,  437,  438,  440,  439,  445,  441,
      446,  447, 1219,  454, 1218,  458, 1217,  448,  453,  443,

      455,  451,  450,  459,  456,  460,  461,  462,  468,  463,
      466, 1216,  452,  464,  469,  472, 1256, 1256,    0, 1256,
     1228, 1256, 1256, 1256, 1256, 1256, 1256, 1256,    0, 1256,
     1227, 1256, 1256, 1256, 1256, 1256, 1256,    0, 1256, 1227,
      517,  141,  145,    0, 1212, 1256, 1256,    0,  465,  478,
      500,  470,  479,  513,  522,  523,  531,  474, 1211,  481,
      480,  258,  530, 1210,  535,  536,  538,  489, 1209,  490,
      539,  542,  544,  540,  541,  543,  545,  550,  555, 1208,
     1207,  548,  549,  557,  562,  553,  563,  565,  564,  569,
      568,  571,  566,  579, 1206,  584, 1205,  586,  583,  585,

      587,  588,  590, 1204,  591,  592,  593,  595,  594,  597,
      596,  598,  600,  602,  603,  599,  606, 1203,  605,  607,
      612,  616,  617,  667, 1193, 1201,    0, 1200,  620, 1199,
      618,  621,  624,  630,  627,  648,  632, 1198,  650,  652,
     1197,  631,  619,  677,  637, 1196,  654,  669,  662,  678,
      634,  680,  681,  683,  684,  685, 1195,  688,  691, 1194,
     1193, 1192, 1191,  693,  694, 1190,  695, 1189,  696,  697,
     1188,  698,  701, 1187,  700, 1186, 1185, 1184,  702, 1183,
      703, 1182,  706, 1181,  707,  716, 1180, 1179,  704,  708,
     1178, 1177,  709,  715, 1176, 1175,  711,  714,  718,    0,

        0,  710, 1174,  724,  728,  727,  725,  729,  730,  732,
      734,  731,  735,  736,  739,  741, 1173,  744,  747,  748,
      754,  763,  767,  768, 1172, 1171,  769,  765, 1170,  770,
      771,  772,  773, 1169,  774,  779,  781,  782,  783, 1168,
     1167,  787, 1161, 1165, 1164,    0,  788,  790, 1163,  793,
      798,  801,  803,  804,  805,  806,  807, 1162,  808,  810,
     1161,  811,  813,  814,  812,  817,  815,  821, 1160,  819,
      824,  826, 1159, 1158,  828, 1152,  831, 1156, 1109, 1097,
     1066,    0,    0,  834,  836, 1065,  837,  838,  841,  839,
      848,  846,  854,  858,  863,  860,  866,  868,  870,  872,

      874,  875,  876, 1063,  883, 1050,  879,    0,  877,    0,
      889, 1054,  884,  886,  891,  895, 1053,  896,  899,  900,
      903,  907,  902,  901,  905,  906,  908,  909,  910,  911,
        0,  912,    0,  914,    0, 1050,  915,  916,  917,  918,
      920,  925,  924,  933,  934,  935,  942,  936, 1048,  946,
      937,  950, 1046,    0,  951,    0, 1045,  955,  952,  956,
     1043, 1042,  953,  958,  968,  969, 1040,  971,  976,  979,
      981,  982,  984,    0, 1038,  986,  987,  989,  993,  994,
     1036, 1034, 1033,  995,  996,  997,  998, 1001, 1030, 1002,
     1005, 1003, 1006, 1007, 1016, 1029, 1026, 1013, 1025, 1024,

     1023, 1015, 1021, 1020, 1019, 1008, 1017,  471, 1256, 1084,
     1090, 1096, 1102, 1106, 1112, 1118, 1124, 1130, 1133, 1136,
     1137, 1141, 1143, 1146, 1148, 1151, 1153, 1155, 1158, 1160,
     1163, 1166
    } ;

static yyconst flex_int16_t yy_def[633] =
    {   0,
      609,    1,  610,  610,  611,  611,  612,  612,  613,  613,
      609,   11,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  609,
      609,  609,  609,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  609,  609,  615,  609,  609,  615,  616,  609,
      609,  609,  609,  609,  609,  609,  609,  617,  609,  609,

      617,  618,  609,  609,  609,  609,  609,  619,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  620,  621,
      609,  609,  609,  609,  609,  609,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  609,
      609,  609,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,

      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  609,  609,  615,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  617,  609,
      609,  609,  609,  609,  609,  609,  609,  619,  609,  609,
      609,  609,  609,  620,  622,  609,  609,  623,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,

      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  609,  609,  622,  624,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  609,  609,  625,

      624,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  609,  614,  614,  626,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  609,  614,  614,  614,  614,
      614,  627,  626,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,

      614,  614,  614,  614,  614,  609,  614,  628,  614,  629,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      630,  614,  631,  614,  629,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  632,  614,  631,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  632,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,

      614,  614,  614,  614,  614,  614,  614,  614,    0,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609
    } ;

static yyconst flex_int16_t yy_nxt[1339] =
    {   0,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   41,   41,   50,   41,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   41,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   41,   41,   73,   41,   74,   41,   75,
       76,   77,   78,   79,   80,   81,   82,   41,   41,   83,
       84,   14,   86,   86,  115,   87,   88,   86,   86,  136,
       87,   88,   91,   92,  118,   93,   94,   91,   92,  116,

       93,   94,   99,   99,  119,  100,  101,  112,   95,  104,
      105,   99,   99,   95,  100,  101,  104,  105,  120,  124,
      113,  113,  131,  132,  136,  125,  121,  122,  136,  126,
       89,  127,  127,  134,  135,   89,  136,  136,  136,  136,
      144,  170,  171,  128,  136,  239,  240,  136,  169,  138,
      102,  154,  136,  143,  241,  241,  136,  165,  145,  102,
      243,  243,  139,  166,  243,  243,  167,  251,  259,   96,
      128,   97,  249,  168,   96,  264,   97,  106,  107,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,

      106,  106,  106,  106,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  106,  109,  106,  106,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  106,  106,  106,  126,
      136,  127,  127,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  128,  136,  136,  136,  136,  140,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  148,
      136,  341,  150,  276,  262,  136,  158,  152,  160,  217,

      128,  136,  136,  254,  136,  146,  147,  266,  136,  141,
      161,  136,  142,  151,  155,  136,  149,  163,  153,  129,
      214,  159,  162,  156,  173,  174,  164,  157,  178,  180,
      181,  179,  190,  182,  183,  184,  199,  136,  198,  200,
      175,  176,  177,  185,  187,  186,  191,  188,  201,  136,
      192,  193,  213,  189,  136,  218,  221,  231,  250,  194,
      204,  205,  195,  196,  206,  136,  136,  197,  207,  208,
      136,  126,  209,  127,  127,  242,  136,  242,  136,  202,
      243,  243,  136,  136,  136,  128,  136,  210,  136,  203,
      136,  136,  215,  136,  211,  136,  136,  136,  269,  216,

      136,  212,  136,  252,  136,  136,  136,  256,  136,  222,
      232,  255,  128,  223,  233,  136,  253,  136,  265,  136,
      279,  224,  234,  136,  272,  225,  235,  226,  236,  263,
      271,  260,  258,  257,  261,  136,  267,  268,  275,  277,
      136,  136,  278,  136,  136,  136,  270,  274,  136,  136,
      273,  280,  283,  136,  136,  136,  136,  136,  282,  136,
      281,  136,  136,  136,  136,  284,  136,  136,  136,  136,
      136,  136,  136,  285,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  287,  136,  136,  136,  136,  136,  292,
      136,  293,  286,  289,  136,  136,  136,  136,  308,  288,

      294,  290,  291,  328,  301,  136,  136,  295,  296,  299,
      297,  300,  298,  302,  303,  306,  136,  309,  304,  305,
      310,  307,  314,  313,  311,  320,  317,  312,  319,  136,
      318,  322,  315,  316,  323,  321,  241,  241,  136,  136,
      329,  333,  331,  338,  330,  332,  136,  136,  324,  339,
      335,  136,  136,  340,  136,  136,  136,  136,  136,  136,
      136,  136,  346,  347,  136,  136,  136,  344,  334,  136,
      356,  136,  336,  136,  350,  324,  337,  349,  136,  136,
      136,  136,  136,  348,  136,  136,  351,  136,  342,  352,
      358,  357,  353,  343,  345,  136,  359,  355,  354,  136,

      136,  136,  136,  136,  136,  361,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  365,  136,  136,
      360,  136,  136,  136,  362,  364,  366,  368,  136,  363,
      370,  371,  136,  136,  136,  136,  136,  136,  375,  367,
      136,  369,  374,  136,  379,  377,  136,  136,  136,  382,
      136,  372,  373,  136,  376,  385,  378,  380,  389,  381,
      383,  388,  405,  386,  136,  390,  136,  384,  136,  394,
      136,  412,  391,  407,  387,  392,  402,  393,  136,  404,
      410,  398,  397,  398,  395,  136,  399,  399,  409,  396,
      403,  413,  406,  136,  136,  415,  136,  136,  411,  136,

      136,  136,  418,  408,  136,  420,  414,  136,  416,  136,
      136,  136,  136,  136,  136,  417,  136,  136,  136,  136,
      136,  426,  136,  136,  136,  136,  136,  136,  423,  425,
      443,  136,  136,  399,  399,  427,  419,  399,  399,  422,
      136,  136,  424,  136,  136,  136,  136,  136,  136,  430,
      136,  136,  136,  421,  435,  136,  447,  136,  429,  449,
      136,  439,  441,  136,  136,  432,  428,  436,  438,  445,
      136,  433,  434,  440,  431,  442,  437,  461,  451,  136,
      444,  136,  458,  136,  136,  136,  136,  136,  136,  136,
      136,  448,  452,  450,  454,  136,  455,  136,  136,  136,

      476,  453,  462,  136,  136,  456,  136,  457,  464,  136,
      467,  459,  460,  468,  136,  469,  463,  136,  470,  136,
      136,  136,  136,  136,  136,  472,  136,  136,  136,  136,
      136,  136,  477,  136,  465,  136,  466,  136,  479,  475,
      136,  471,  136,  473,  136,  474,  487,  136,  478,  506,
      136,  486,  136,  136,  136,  136,  480,  136,  490,  488,
      481,  493,  136,  485,  136,  489,  484,  499,  513,  501,
      136,  491,  492,  497,  136,  500,  136,  502,  503,  136,
      494,  507,  136,  495,  136,  496,  136,  498,  136,  520,
      136,  136,  136,  136,  514,  136,  504,  505,  509,  136,

      136,  518,  136,  511,  516,  136,  517,  136,  512,  521,
      515,  136,  136,  537,  519,  136,  136,  136,  136,  136,
      522,  136,  136,  136,  136,  136,  136,  136,  136,  528,
      136,  136,  136,  136,  136,  534,  136,  523,  525,  526,
      136,  136,  524,  530,  529,  527,  532,  536,  545,  136,
      136,  136,  136,  136,  541,  563,  559,  542,  136,  538,
      546,  558,  136,  540,  539,  544,  136,  136,  136,  136,
      555,  136,  136,  547,  136,  543,  551,  548,  561,  549,
      550,  552,  564,  553,  136,  136,  578,  136,  569,  560,
      557,  562,  136,  566,  570,  136,  576,  136,  136,  565,

      136,  567,  136,  136,  572,  136,  577,  568,  571,  136,
      136,  136,  136,  136,  136,  579,  573,  136,  136,  136,
      585,  136,  136,  136,  136,  580,  581,  575,  582,  136,
      589,  136,  136,  136,  584,  136,  136,  136,  588,  136,
      136,  136,  136,  583,  587,  136,  136,  592,  586,  136,
      136,  591,  136,  590,  136,  595,  136,  597,  136,  136,
      600,  136,  136,  596,  136,  598,  136,  593,  602,  136,
      136,  531,  594,  606,  599,  605,  601,  608,  603,  136,
      604,  136,  136,  607,   85,   85,   85,   85,   85,   85,
       90,   90,   90,   90,   90,   90,   98,   98,   98,   98,

       98,   98,  103,  103,  103,  103,  103,  103,  137,  137,
      137,  137,  219,  136,  219,  219,  219,  219,  220,  220,
      220,  220,  220,  220,  229,  136,  229,  229,  229,  229,
      230,  230,  230,  230,  230,  230,  238,  238,  238,  244,
      244,  245,  245,  326,  326,  326,  326,  327,  327,  401,
      401,  401,  446,  446,  483,  483,  483,  510,  510,  533,
      533,  535,  535,  535,  554,  554,  556,  556,  556,  574,
      574,  574,  136,  508,  136,  136,  136,  136,  136,  136,
      136,  136,  482,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,

      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  325,  400,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  325,  239,
      230,  220,  136,  136,  136,  136,  170,  136,  136,  248,
      247,  246,  237,  228,  227,  172,  136,  133,  130,  123,
      117,  114,  111,  110,  609,   13,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,

      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609
    } ;

static yyconst flex_int16_t yy_chk[1339] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,   23,    3,    3,    4,    4,   45,
        4,    4,    5,    5,   28,    5,    5,    6,    6,   23,

        6,    6,    7,    7,   28,    7,    7,   21,    5,    9,
        9,    8,    8,    6,    8,    8,   10,   10,   30,   32,
       21,   21,   37,   37,   42,   32,   30,   30,   44,   34,
        3,   34,   34,   39,   39,    4,   46,   59,  148,   52,
       45,   61,   61,   34,   58,  109,  109,  138,   59,   42,
        7,   52,  152,   44,  126,  126,  140,   58,   46,    8,
      242,  242,   42,   58,  243,  243,   58,  140,  148,    5,
       34,    5,  138,   58,    6,  152,    6,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   33,
       43,   33,   33,   47,   48,   49,   51,   50,   53,   54,
      150,   57,  143,   33,  262,  165,   65,   66,   43,   55,
       56,   75,   81,   70,   68,   64,   74,  154,   67,   49,
       76,  262,   50,  165,  150,   69,   55,   51,   56,   84,

       33,   80,  139,  143,   71,   47,   48,  154,   72,   43,
       56,   73,   43,   50,   53,   78,   49,   57,   51,   33,
       81,   55,   56,   53,   64,   64,   57,   54,   65,   66,
       67,   65,   70,   68,   68,   68,   75,   77,   74,   75,
       64,   64,   64,   68,   69,   68,   71,   69,   76,   79,
       71,   72,   80,   69,   82,   84,   89,  102,  139,   72,
       78,   78,   73,   73,   78,  141,  142,   73,   78,   78,
      144,  127,   78,  127,  127,  128,  146,  128,  151,   77,
      128,  128,  145,  147,  156,  127,  158,   79,  149,   77,
      159,  157,   82,  162,   79,  153,  161,  163,  158,   82,

      164,   79,  168,  141,  173,  160,  174,  145,  175,   89,
      102,  144,  127,   89,  102,  166,  142,  167,  153,  176,
      168,   89,  102,  169,  161,   89,  102,   89,  102,  151,
      160,  149,  147,  146,  149,  177,  156,  157,  164,  166,
      178,  179,  167,  180,  181,  182,  159,  163,  184,  183,
      162,  169,  175,  185,  186,  188,  187,  190,  174,  200,
      173,  189,  191,  192,  198,  176,  203,  202,  213,  199,
      194,  201,  205,  177,  196,  204,  206,  207,  208,  210,
      214,  249,  211,  179,  209,  215,  252,  608,  216,  184,
      258,  185,  178,  181,  250,  253,  261,  260,  200,  180,

      186,  182,  183,  249,  192,  268,  270,  186,  187,  190,
      188,  191,  189,  194,  196,  199,  251,  201,  196,  198,
      202,  199,  206,  205,  203,  213,  209,  204,  211,  254,
      210,  215,  207,  208,  216,  214,  241,  241,  255,  256,
      250,  254,  252,  258,  251,  253,  263,  257,  241,  260,
      256,  265,  266,  261,  267,  271,  274,  275,  272,  276,
      273,  277,  268,  270,  282,  283,  278,  266,  255,  286,
      276,  279,  257,  284,  273,  241,  257,  272,  285,  287,
      289,  288,  293,  271,  291,  290,  273,  292,  263,  273,
      278,  277,  273,  265,  267,  294,  279,  275,  274,  299,

      296,  300,  298,  301,  302,  283,  303,  305,  306,  307,
      309,  308,  311,  310,  312,  316,  313,  287,  314,  315,
      282,  319,  317,  320,  284,  286,  288,  290,  321,  285,
      292,  293,  322,  323,  331,  343,  329,  332,  299,  289,
      333,  291,  298,  335,  303,  301,  334,  342,  337,  307,
      351,  294,  296,  345,  300,  310,  302,  305,  314,  306,
      308,  313,  333,  311,  336,  315,  339,  309,  340,  320,
      347,  342,  316,  335,  312,  317,  329,  319,  349,  332,
      339,  324,  323,  324,  321,  348,  324,  324,  337,  322,
      331,  343,  334,  344,  350,  345,  352,  353,  340,  354,

      355,  356,  349,  336,  358,  351,  344,  359,  347,  364,
      365,  367,  369,  370,  372,  348,  375,  373,  379,  381,
      389,  358,  383,  385,  390,  393,  402,  397,  354,  356,
      393,  394,  386,  398,  398,  359,  350,  399,  399,  353,
      404,  407,  355,  406,  405,  408,  409,  412,  410,  367,
      411,  413,  414,  352,  375,  415,  402,  416,  365,  405,
      418,  385,  389,  419,  420,  370,  364,  379,  383,  397,
      421,  372,  373,  386,  369,  390,  381,  418,  407,  422,
      394,  428,  414,  423,  424,  427,  430,  431,  432,  433,
      435,  404,  408,  406,  410,  436,  411,  437,  438,  439,

      436,  409,  419,  442,  447,  412,  448,  413,  421,  450,
      424,  415,  416,  424,  451,  427,  420,  452,  428,  453,
      454,  455,  456,  457,  459,  431,  460,  462,  465,  463,
      464,  467,  436,  466,  422,  470,  423,  468,  438,  435,
      471,  430,  472,  432,  475,  433,  451,  477,  437,  475,
      484,  450,  485,  487,  488,  490,  439,  489,  454,  452,
      442,  457,  492,  448,  491,  453,  447,  465,  487,  467,
      493,  455,  456,  463,  494,  466,  496,  468,  470,  495,
      459,  475,  497,  460,  498,  462,  499,  464,  500,  494,
      501,  502,  503,  509,  488,  507,  471,  472,  477,  505,

      513,  492,  514,  484,  490,  511,  491,  515,  485,  495,
      489,  516,  518,  513,  493,  519,  520,  524,  523,  521,
      496,  525,  526,  522,  527,  528,  529,  530,  532,  502,
      534,  537,  538,  539,  540,  509,  541,  497,  499,  500,
      543,  542,  498,  505,  503,  501,  507,  511,  522,  544,
      545,  546,  548,  551,  518,  542,  538,  519,  547,  514,
      523,  537,  550,  516,  515,  521,  552,  555,  559,  563,
      532,  558,  560,  524,  564,  520,  528,  525,  540,  526,
      527,  529,  543,  530,  565,  566,  560,  568,  547,  539,
      534,  541,  569,  545,  548,  570,  558,  571,  572,  544,

      573,  545,  576,  577,  551,  578,  559,  546,  550,  579,
      580,  584,  585,  586,  587,  563,  552,  588,  590,  592,
      570,  591,  593,  594,  606,  564,  565,  555,  566,  598,
      576,  602,  595,  607,  569,  605,  604,  603,  573,  601,
      600,  599,  597,  568,  572,  596,  589,  579,  571,  583,
      582,  578,  581,  577,  575,  585,  567,  586,  562,  561,
      590,  557,  553,  585,  549,  587,  536,  580,  592,  517,
      512,  506,  584,  598,  588,  595,  591,  607,  593,  504,
      594,  486,  481,  602,  610,  610,  610,  610,  610,  610,
      611,  611,  611,  611,  611,  611,  612,  612,  612,  612,

      612,  612,  613,  613,  613,  613,  613,  613,  614,  614,
      614,  614,  615,  480,  615,  615,  615,  615,  616,  616,
      616,  616,  616,  616,  617,  479,  617,  617,  617,  617,
      618,  618,  618,  618,  618,  618,  619,  619,  619,  620,
      620,  621,  621,  622,  622,  622,  622,  623,  623,  624,
      624,  624,  625,  625,  626,  626,  626,  627,  627,  628,
      628,  629,  629,  629,  630,  630,  631,  631,  631,  632,
      632,  632,  478,  476,  474,  473,  469,  461,  458,  449,
      445,  444,  443,  441,  440,  434,  429,  426,  425,  417,
      403,  396,  395,  392,  391,  388,  387,  384,  382,  380,

      378,  377,  376,  374,  371,  368,  366,  363,  362,  361,
      360,  357,  346,  341,  338,  330,  328,  326,  325,  318,
      304,  297,  295,  281,  280,  269,  264,  259,  245,  240,
      231,  221,  212,  197,  195,  193,  171,  155,  137,  136,
      135,  131,  105,   95,   92,   63,   41,   38,   35,   31,
       27,   22,   18,   17,   13,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,

      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
#line 2 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"

// use NOMINMAX to avoid conflicts between windows.h min,max and std::min std::max ...
#ifndef NOMINMAX
  #define NOMINMAX
#endif

#include "IdentifierInfo.h"
//#include "Variable.hpp"
#include "AmiInstructionBlock.h"
#include "driver.h"

#include "scanner.h"

extern yyip::Driver GB_driver;

/* import the parser's token type into a local typedef */
typedef yyip::Parser::token token;
typedef yyip::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H


#include <boost/format.hpp>
#include <boost/shared_ptr.hpp>

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <locale.h>
//#include "messages.h"
//#include "fonctions.h"

#include "IdentifierInfo.h"
#include "Variable.hpp"
#include "AmiInstructionBlock.h"

#include "amiengine_bison.tab.hpp"
#include "VarContexts.hpp"
//#include "ami_function.h"
#include "VarArray.h"
#include <string>

#define LEX_DEBUG(expr) if (GB_debug) {expr}


//int          yyiplineno = 0;
//std::string  GB_current_file;

int yycharno = 0;
bool LexError = 0;

//extern  void yyiperror(const char*);
#include "LanguageBaseConfigure.h"
LanguageBase_VAR_IMPORT VarContexts  Vars;

yyip::Parser::token::yytokentype checkvar(
      yyip::Parser::semantic_type* yylval,
      const char* varname, int context=-1);

BasicVariable::ptr IsObject(  const char* varname, int context=-1);

using namespace std;


string* cpp_string;
//char string_buf[256];
//char *string_buf_ptr;

//#define MAXSIZE_BLOCK 10000
//char block_buf[MAXSIZE_BLOCK];
//char *block_buf_ptr;


AmiInstructionBlock* ami_block;

int  block_level = 0;
int comment_caller;



extern int       GB_argc;
extern std::string*  GB_argv;
extern int       GB_num_arg_parsed;


/* enable c++ scanner class generation */





/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 113 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 1015 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/GeneratedFlexBison/amiengine_flex.cpp"

#define INITIAL 0
#define str 1
#define block 2
#define block_str 3
#define comment 4
#define point 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 121 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"


 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();


#line 1129 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/GeneratedFlexBison/amiengine_flex.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 610 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1256 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 129 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::RIGHT_ASSIGN);   /*{>>=,RIGHT_ASSIGN}*/
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 130 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::LEFT_ASSIGN);    /*{<<=,LEFT_ASSIGN}*/
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 131 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::ADD_ASSIGN);     /*{+=,ADD_ASSIGN}*/
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 132 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::SUB_ASSIGN);     /*{-=,SUB_ASSIGN}*/
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 133 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::MUL_ASSIGN);     /*{*=,MUL_ASSIGN}*/
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 134 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{  return(token::DIV_ASSIGN); } /*{/=,DIV_ASSIGN}*/
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 135 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{  return(token::MOD_ASSIGN); } /*{%=,MOD_ASSIGN}*/
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 136 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{  return(token::AND_ASSIGN); } /*{&=,AND_ASSIGN}*/
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 137 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{  return(token::XOR_ASSIGN); } /*{ ^=,XOR_ASSIGN}*/
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 138 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{  return(token::OR_ASSIGN); } /*{|=,OR_ASSIGN}*/
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 139 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{  return(token::RIGHT_OP); } /*{>>,RIGHT_OP}*/
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 140 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{  return(token::LEFT_OP); } /*{<<,LEFT_OP}*/
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 141 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{  return(token::INC_OP); } /*{++,INC_OP}*/
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 142 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{  return(token::DEC_OP); } /*{--,DEC_OP}*/
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 143 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{  return(token::PTR_OP); } /*{->,PTR_OP}*/
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 144 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{  return(token::AND_OP); } /*{&&,AND_OP}*/
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 145 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{  return(token::OR_OP); } /*{||,OR_OP}*/
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 146 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{  return(token::LE_OP); } /*{<=,LE_OP}*/
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 147 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{  return(token::GE_OP); } /*{>=,GE_OP}*/
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 148 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{  return(token::EQ_OP); } /*{==,EQ_OP}*/
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 149 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{  return(token::NE_OP); } /*{!=,NE_OP}*/
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 152 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::TRANSPOSE_OP); /*{',TRANSPOSE_OP}*/
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 153 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_EXP);  /*{^,T_EXP}*/
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 154 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_GT);   /*{>,T_GT}*/
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 155 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_LT);   /*{<,T_LT}*/
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 156 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_MULT); /*{*,T_MULT}*/
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 157 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::POINTWISE_MULT);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 158 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_DIV);  /*{/,T_DIV}*/
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 159 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_NOT); /*{!,T_NOT}*/
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 160 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_ADD); /*{+,T_ADD}*/
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 161 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_SUB); /*{-,T_SUB}*/
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 162 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_MOD); /*{%,T_MOD}*/
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 164 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::ASSIGN_OP); /*{=,ASSIGN_OP}*/
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 165 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_OP_PAR); /*{(,T_OP_PAR}*/
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 166 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_CL_PAR); /*{),T_CL_PAR}*/
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 167 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_OP_BR);  /*{[,T_OP_BR}*/
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 168 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_CL_BR);  /*{],T_CL_BR}*/
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 169 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_AND);    /*{&,T_AND}*/
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 170 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_OR);     /*{|,T_OR}*/
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 172 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_COMMA); /*{,,T_COMMA}*/
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 173 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_QUEST);  /*{?,T_QUEST}*/
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 174 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_COLON); /*{:,T_COLON}*/
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 177 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_SEMICOLON);  /*{;,T_SEMICOLON}*/
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 180 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
  BEGIN(point);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 185 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
  yylloc->step();
}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 189 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
  yylloc->lines(1);
  // yylloc->step();
  GB_driver.yyiplineno++;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 195 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
  BEGIN(0);
  yylval->ident = new IdentifierInfo;
  yylval->ident->SetName( YYText());
  yylval->ident->SetCreationContext(-1);
  return(token::POINT_IDENTIFIER);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 203 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_LineNumber); /*{LineNumber,T_LineNumber}*/
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 205 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_BasicType); /*{BasicType,T_BasicType}*/
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 208 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_GetObjectName); /*{GetObjectName,T_GetObjectName}*/
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 211 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_CHAR); /*{CHAR,T_CHAR}*/
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 212 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_UCHAR); /*{UCHAR,T_UCHAR}*/
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 213 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_SHORT); /*{SHORT,T_SHORT}*/
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 214 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_USHORT); /*{USHORT,T_USHORT}*/
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 215 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_INT); /*{INT,T_INT}*/
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 216 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_UINT); /*{UINT,T_UINT}*/
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 217 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_FLOAT); /*{FLOAT,T_FLOAT}*/
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 218 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_LONG); /*{LONG,T_LONG}*/ /// New (added: 27/05/2010)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 219 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_ULONG); /*{ULONG,T_ULONG}*/ /// New (added: 27/05/2010)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 220 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_BOOL); /*{BOOL,T_BOOL}*/ /// New (added: 19/11/2010)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 221 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_DOUBLE); /*{DOUBLE,T_DOUBLE}*/
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 222 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_RGB); /*{RGB,T_RGB}*/
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 223 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_FLOAT_VECTOR); /*{FLOAT_VECTOR,T_FLOAT_VECTOR}*/
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 224 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_Comments); /*{Comments,T_Comments}*/
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 226 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_NUM); /*{NUM,T_NUM}*/
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 227 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_STRING); /*{STRING,T_STRING}*/
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 228 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_OBJECT); /*{OBJECT,T_OBJECT}*/
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 229 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_VAR); /*{VAR,T_VAR}*/
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 231 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_global);     /*{global,T_global}*/
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 232 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_global_new); /*{global_new,T_global_new}*/
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 233 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_local_new); /*{local_new,T_local_new}*/
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 234 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_local);      /*{local,T_local}*/
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 235 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_wait);       /*{wait,T_wait}*/
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 237 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
//
//============================ Parse constants ====================
//
 return(token::CONST_PI);
} /*{Pi,CONST_P}*/
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 245 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
//
//============================ Parse Math functions ====================
//
return(token::SIN);
} /*{sin,SIN}*/
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 251 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::COS); /*{cos,COS}*/
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 252 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::TAN); /*{tan,TAN}*/
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 253 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::ASIN); /*{asin,ASIN}*/
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 254 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::ACOS); /*{acos,ACOS}*/
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 255 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::ATAN); /*{atan,ATAN}*/
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 256 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::EXP); /*{exp,EXP}*/
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 257 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::LN); /*{ln,LN}*/
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 258 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::LOG); /*{log,LOG}*/
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 259 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::COSH); /*{cosh,COSH}*/
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 260 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::SINH); /*{sinh,SINH}*/
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 261 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::SQRT); /*{sqrt,SQRT}*/
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 262 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::ABS); /*{abs,ABS}*/
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 263 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::NORM); /*{norm,NORM}*/
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 264 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::ROUND); /*{round,ROUND}*/
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 265 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::FLOOR); /*{floor,FLOOR}*/
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 267 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_PROC);   /*{proc,T_PROC}*/
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 268 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_Class);  /*{Class,T_Class}*/
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 269 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_public);  /*{public,T_public}*/
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 271 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
//
//============================ Parse Loops and Conditions ===============
//
return(token::FOR);
} /*{for,FOR}*/
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 277 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_IN); /*{in,T_IN}*/
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 278 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::TO); /*{to,TO}*/
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 279 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::STEP); /*{step,STEP}*/
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 280 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::ENDFOR); /*{endfor,ENDFOR}*/
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 282 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_REPEAT); /*{repeat,T_REPEAT}*/
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 283 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_WHILE); /*{while,T_WHILE}*/
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 284 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_UNTIL); /*{until,T_UNTIL}*/
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 285 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_BREAK); /*{break,T_BREAK}*/
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 287 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::IF); /*{if,IF}*/
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 288 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::ELSE); /*{else,ELSE}*/
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 290 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
//
//============================ Parse Commands ===============
//
return(token::ASHELL);
} /*{sh,ASHELL}*/
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 297 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_SetDebugOn); /*{SetDebugOn,T_SetDebugOn}*/
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 298 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_SetDebugOff); /*{SetDebugOff,T_SetDebugOff}*/
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 299 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_TraceScanning); /*{TraceScanning,T_TraceScanning}*/
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 300 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_TraceParsing); /*{TraceParsing,T_TraceParsing}*/
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 301 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_SetVerboseOn); /*{SetVerboseOn,T_SetVerboseOn}*/
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 302 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_SetVerboseOff); /*{SetVerboseOff,T_SetVerboseOff}*/
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 303 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_NoMessageDialog); /*{NoMessageDialog,T_NoMessageDialog}*/
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 305 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_GetScriptsDir); /*{GetScriptDir,T_GetScriptDir}*/
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 306 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_SetProgress); /*{SetProgress,T_SetProgress}*/
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 307 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_SetStatusText); /*{SetStatusText,T_SetStatusText}*/
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 308 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::QUIT); /*{Quit,QUIT}*/
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 309 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::QUIT);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 312 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::SHOW); /*Hide               return(token::T_HIDE); {Hide,T_HIDE}*/
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 313 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_HIDE);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 314 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::HELP); /*{Help,HELP}*/
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 315 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::HELP);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 316 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::LS); /*{ls,LS}*/
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 317 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::PRINT); /*{print,PRINT}*/
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 318 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::PRINTN); /*{printn,PRINTN}*/
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 319 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_boost_format); /*{boost_format,T_boost_format}*/
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 320 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_SPRINT); /*{sprint,T_SPRINT}*/
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 321 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::VARIABLES); /*{vars,VARIABLES}*/
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 322 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::FUNCTION); /*{func,FUNCTION}*/
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 323 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_eval); /*{eval,T_eval}*/
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 325 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_RestartTime); /*{RestartTime,T_RestartTime}*/
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 326 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_InitTime); /*{InitTime,T_InitTime}*/
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 327 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_TimeSpent); /*{TimeSpent,T_TimeSpent}*/
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 328 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_EndTime); /*{EndTime,T_EndTime}*/ 
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 330 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_ProcessEvents); /*{ProcessEvents,T_ProcessEvents}*/
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 332 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_info); /*{info,T_info}*/
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 334 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_del); /*{del,T_del}*/
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 335 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_delvars); /*{delvars,T_delvars}*/
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 337 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{ return(token::T_exists);       //FileExists        return(token::T_FileExists);  
// {FileExists,T_FileExists} 
} /*{exists,T_exists}*/
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 341 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_InfoDialog); /*{InfoDialog,T_InfoDialog}*/
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 343 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_slice);        /*{slice,T_slice}*/
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 345 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_argc);         /*{argc,T_argc}*/
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 346 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
return(token::T_emptyargs);    /*{emptyargs,T_emptyargs}*/
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 349 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
//
//============================ Parse float ====================
//
//  setlocale(LC_NUMERIC,"C");
  setlocale(LC_NUMERIC, "C");
  yylval->adouble=atof(YYText());
  return(token::NUMBER);
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 360 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
//
//============================ Parse interger ====================
//
//  setlocale(LC_NUMERIC,"C");
  setlocale(LC_NUMERIC, "C");
  char* endstr;
  yylval->adouble=strtol(YYText(),&endstr,0);
  return(token::NUMBER);
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 371 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
//
//============================ Parse interger ====================
//
//  setlocale(LC_NUMERIC,"C");
  setlocale(LC_NUMERIC, "C");
  char* endstr;
  yylval->adouble=strtol(YYText(),&endstr,0);
  return(token::NUMBER);
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 384 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
//
//
//============================ Parse string ====================
//
 cpp_string = new string();
 BEGIN(str);
 }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 393 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
  // end of string
  // Not thread safe ...
  BEGIN(0);
  // add the \0 character, why ???...
  cpp_string->append(1,'\0');

  if((yylval->astring = new char[cpp_string->length()+1])==NULL) {
    GB_driver.yyiperror("string allocation error");
    return token::LEX_ERROR;
  }
  // first conversion, we keep char* for astring for now
  strcpy(yylval->astring, cpp_string->c_str());
  delete cpp_string;
  cpp_string = NULL;
  return(token::ASTRING);
}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 411 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
  GB_driver.yyiperror("string termination error");
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 415 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
cpp_string->append(1,'\n');
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 416 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
cpp_string->append(1,'\t');
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 417 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
cpp_string->append(1,'\r');
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 418 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
cpp_string->append(1,'\b');
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 419 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
cpp_string->append(1,'\f');
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 421 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
cpp_string->append(1,YYText()[1]);
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 423 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
  cpp_string->append(YYText());
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 427 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
  cpp_string->append(YYText());
/*
  char *yptr = YYText();

  while (*yptr)
    *string_buf_ptr++ = *yptr++;
*/
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 438 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
  yylval->adouble=GB_argc-GB_num_arg_parsed;
  return(token::NUMBER);
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 443 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
  // TODO allow more than 10 arguments!!
  int n,pos;
  n = YYText()[1]-'0';
  // TODO: check the position, improve the code here
  pos = n+GB_num_arg_parsed-1;

  if ((pos>=GB_argc)||(pos<0)) {
    boost::format fmt =
        boost::format("improcess.l \t invalid argument number %d / %d\n");
#ifdef str
  #undef str
      GB_driver.yyiperror( str(fmt % n % (GB_argc-GB_num_arg_parsed)).c_str() );
  #define str 1
#else
      GB_driver.yyiperror( str(fmt % n % (GB_argc-GB_num_arg_parsed)).c_str() );
#endif
    return token::LEX_ERROR;
//myss1.c_str() );
  }

  // we use GB_argv[n+1] because the first two arguments are the program and the script file
  std::string argument(GB_argv[pos]);
  
  if((yylval->astring = new char[argument.size()+1])==NULL) {
    GB_driver.yyiperror("string allocation error");
    return token::LEX_ERROR;
  }

  strcpy(yylval->astring,argument.c_str());

  return(token::ASTRING);

}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 478 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
//============================ Parse block ====================
//
  if (block_level==0) {
    ami_block = new AmiInstructionBlock();
    ami_block->SetStartingLine(GB_driver.yyiplineno);
    if (GB_debug )std::cerr << "Starting block at " <<  GB_driver.yyiplineno << std::endl;
    if (GB_debug )std::cerr << "Starting block at " << *yylloc << std::endl;
    block_level++;
    BEGIN(block);
    //printf("starting block level 0 at line %d\n",GB_driver.yyiplineno);
  }

}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 493 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
  ami_block->GetBody().append(YYText());
  BEGIN(block_str);
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 498 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
  ami_block->GetBody().append(YYText());
  BEGIN(block);
}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 503 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
  GB_driver.yyiperror("string termination error");
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 507 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
ami_block->GetBody().append(YYText());
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 508 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
ami_block->GetBody().append(YYText());
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 509 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
ami_block->GetBody().append(YYText());
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 510 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
ami_block->GetBody().append(YYText());
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 511 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
ami_block->GetBody().append(YYText());
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 512 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
ami_block->GetBody().append(YYText());
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 513 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
ami_block->GetBody().append(YYText());
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 514 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
ami_block->GetBody().append(YYText());
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 517 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
//============================ Parse comment ====================
//
    comment_caller = block;
    BEGIN(comment);
    //printf("begin comment in block at line %d\n",GB_driver.yyiplineno);
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 525 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
    comment_caller = block;
    BEGIN(comment);
    //    printf("begin comment in block \n");
}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 532 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
  // dealing with windows end-of-lines ...
  yylloc->lines(1); yylloc->step();
  GB_driver.yyiplineno++;
  ami_block->GetBody().append(YYText());
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 540 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
  //printf("Enter block at line %d\n",GB_driver.yyiplineno);
  block_level++;
  ami_block->GetBody().append(1,'{');
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 546 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{

  block_level--;
  if (block_level>0)
    ami_block->GetBody().append(1,'}');
  else {
    BEGIN(0);
    ami_block->GetBody().append(3,'\0');
//    cpp_block->append(1,YY_END_OF_BUFFER_CHAR);

//     printf("block = *%s*\n",block_buf);

/*
    length=ami_block->GetBody().length();

    if((yyiplval.astring = new char[length+3])==NULL)
      yyiperror(E_MEM);
    strcpy(yyiplval.astring,
            ami_block->GetBody().c_str());
    // why add those 3 characters ...??? lex is looking ahead several characters
    // risky in memory ...
    yyiplval.astring[length  ]=YY_END_OF_BUFFER_CHAR;
    yyiplval.astring[length+1]=YY_END_OF_BUFFER_CHAR;
    yyiplval.astring[length+2]=YY_END_OF_BUFFER_CHAR;
*/
    yylval->ablock = ami_block;
    // cannot use smart pointers in union ...
    // needs to be freed after use ...

    //ami_block = AmiInstructionBlock_ptr();
    return(token::ABLOCK);
  }
}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 581 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
//  char *yptr = YYText();
//  while (*yptr)
//    *block_buf_ptr++ = *yptr++;
  ami_block->GetBody().append(YYText());
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 589 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
//============================ Parse comment ====================
//
    comment_caller = INITIAL;
    BEGIN(comment);
//  printf("begin comment \n");
}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 597 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
    comment_caller = INITIAL;
    BEGIN(comment);
//  printf("begin comment \n");
}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 604 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
  //GB_driver.yyiplineno++;
//  printf("end comment from %d \n",comment_caller);
  // use unput to accept the end of the command if any
// std::cout << "<comment>\n [" << YYText() << "]" << std::endl;
// std::cout << "length = " << strlen(YYText()) << std::endl;
  if (strlen(YYText())==1) {
    unput(YYText()[0]);
  }
  if (strlen(YYText())==2) {
    unput(YYText()[1]);
    unput(YYText()[0]);
  }
  BEGIN(comment_caller);
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 620 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
  // on ecrit ce qu'on veut dans un commentaire ...
  // sauver les commentaires dans une variable du driver??
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 625 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
//
//============================ Parse variable ====================
//
  int context = Vars.GetCurrentContextNumber();
  string text(YYText());
  string varname = text.substr(7);
  yyip::Parser::token::yytokentype result = checkvar(yylval,varname.c_str(),context);
  return result;
}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 636 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
//
//============================ Parse variable ====================
//
  string text(YYText());
  string varname = text.substr(8);
  yyip::Parser::token::yytokentype result = checkvar(yylval,varname.c_str(),0);
  return result;
}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 646 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
//
//============================ Parse variable ====================
//
  string text(YYText());
  string varname = text.substr(6);
  yyip::Parser::token::yytokentype 
      result = checkvar(yylval,varname.c_str(),
                        OBJECT_CONTEXT_NUMBER);
  return result;
}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 659 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
//
//============================ Parse variable ====================
//
  string text(YYText());
  string varname = text.substr(2);
  yyip::Parser::token::yytokentype 
      result = checkvar(yylval,varname.c_str(),
                        OBJECT_CONTEXT_NUMBER);
  return result;
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 672 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
// TODO: can all the variable system to return only variable from lex !!!
// this rule is a hack
//
//============================ Parse variable in a given context ====================
//
  //cout << "::XX->XX variable in object ?" << std::endl;
  string text(YYText());
  size_t pos = text.find("->");
  string contextname = text.substr(2,pos-2);


  // check if contextname is really a context
  //cout << "looking for "<< contextname << std::endl;
  BasicVariable::ptr var = IsObject(contextname.c_str(),OBJECT_CONTEXT_NUMBER);
  if (var.get()) 
  {
    FILE_MESSAGE("Object found");
    string varname = text.substr(pos+2);

    Variable<AMIObject>::ptr objvar( boost::dynamic_pointer_cast<Variable<AMIObject> >(var));
    AMIObject::ptr object (objvar->Pointer());

    Variables::ptr previous_ocontext = Vars.GetObjectContext();
    Vars.SetObjectContext(object->GetContext());

    yyip::Parser::token::yytokentype result = checkvar(yylval,varname.c_str(),OBJECT_CONTEXT_NUMBER);

    Vars.SetObjectContext(previous_ocontext);
    return result;
  } else {
    std::string error_string =" lex error \t object not found ";
    GB_driver.yyiperror(error_string.c_str());
  }
}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 709 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
//
//============================ Parse variable in a given context ====================
//
  //cout << "variable in object ?" << std::endl;
  string text(YYText());
  size_t pos = text.find("->");
  string contextname = text.substr(0,pos);


  // check if contextname is really a context
  BasicVariable::ptr var = IsObject(contextname.c_str());
  if (var.get()) 
  {
    FILE_MESSAGE("Object found");
    string varname = text.substr(pos+2);

    Variable<AMIObject>::ptr objvar( boost::dynamic_pointer_cast<Variable<AMIObject> >(var));
    AMIObject::ptr object ( objvar->Pointer());

    Variables::ptr previous_ocontext = Vars.GetObjectContext();
    Vars.SetObjectContext(object->GetContext());

    yyip::Parser::token::yytokentype result = checkvar(yylval,varname.c_str(),OBJECT_CONTEXT_NUMBER);

    Vars.SetObjectContext(previous_ocontext);
    return result;
  } else {
    std::string error_string =" lex error \t object not found ";
    GB_driver.yyiperror(error_string.c_str());
  }
}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 746 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
//
//============================ Parse variable ====================
//
   return checkvar(yylval,YYText());
}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 754 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
                    yylloc->step();
                  }
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 758 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
  // allow multiline command
  yylloc->lines(1); 
  //yylloc->step();
  GB_driver.yyiplineno++;
}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 765 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{
          //cout << "NEWLINE \n" << std::endl;
//          if (yyleng!=1)std::cout << " ******* yyleng = " << yyleng << "************" << std::endl; 
  yylloc->lines(1); yylloc->step();
  GB_driver.yyiplineno++;
  return(token::END_INSTRUCTION);
} /*{end-of-line,END_INSTRUCTION}*/
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 773 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
{

    std::string error_string =" lex error \t invalid characters ";
    GB_driver.yyiperror(error_string.c_str());

  }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 783 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"
ECHO;
	YY_BREAK
#line 2544 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/GeneratedFlexBison/amiengine_flex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(str):
case YY_STATE_EOF(block):
case YY_STATE_EOF(block_str):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(point):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyipfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyipfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyiprealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyiprealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 610 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 610 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 609);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyipalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyipalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyipfree((void *) b->yy_ch_buf  );

	yyipfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyipalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyiprealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyipalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyiprealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyipalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyiprealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyipfree (void * ptr )
{
	free( (char *) ptr );	/* see yyiprealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 783 "/home/karl/projects/Sourceforge/amilab/amilab_engine/src/Language/amiengine_flex.l"





//--------------------------------------------------
//       IsObject()
//--------------------------------------------------
//
BasicVariable::ptr IsObject( const char* varname, int context)
//
{
  BasicVariable::ptr var = Vars.GetVar(varname,context);
  if (var.get())
    if ((var->Type() == type_ami_object))
      return var;
    else 
      return BasicVariable::ptr();
  else
    return BasicVariable::ptr();
}


//--------------------------------------------------
//       checkvar()
//--------------------------------------------------
//
yyip::Parser::token::yytokentype checkvar(
  yyip::Parser::semantic_type* yylval,
  const char* varname,
  int context
)
//
{

  BasicVariable::ptr var = Vars.GetVar(varname,context);
  //std::cout << "Vars ptr = " << &Vars << std::endl;
  //std::cout << "Vars.GetCurrentContextNumber() = " 
  //          << Vars.GetCurrentContextNumber() << std::endl;
  //cout << "res = " << res << std::endl;
  if  ((!GB_driver.procedure_declaration) && var.get())   {

    // add the variable to the stack
    GB_driver.var_stack.AddVar(var);

    //yylval->variable = var.get();
    switch(var->Type()) {
        /*{$variable_image,VAR_IMAGE}*/
      case type_bool:
      case type_float:
      case type_long:
      case type_ulong:
      case type_short:
      case type_ushort:
      case type_double:
      case type_int:
      case type_uchar:
        return token::PROCESSED_VAR; /*{$PROCESSED_VAR,PROCESSED_VAR}*/
//      case type_surfdraw:         return token::VAR_SURFDRAW;
        /*{$variable_surfdraw,VAR_SURFDRAW}*/
//      case type_file:             return token::VAR_FILE;
        /*{$variable_file,VAR_FILE}*/
      case type_c_procedure:      return token::VAR_C_PROCEDURE;
        /*{$variable_c_procedure,VAR_C_PROCEDURE}*/
      case type_class_member:      return token::VAR_CLASS_MEMBER;
        /*{$variable_class_procedure,VAR_CLASS_MEMBER}*/
      case type_c_function: return token::VAR_C_FUNCTION;
        /*{$variable_c_function,VAR_C_FUNCTION}*/

      case type_ami_function:     return token::VAR_AMI_FUNCTION;
        /*{$variable_ami_function,VAR_AMI_FUNCTION}*/
      case type_ami_class:     return token::VAR_AMI_CLASS;
        /*{$variable_ami_class,VAR_AMI_CLASS}*/
      case type_ami_object:     return token::VAR_AMI_OBJECT;
        /*{$variable_ami_object,VAR_AMI_OBJECT}*/

      case type_string:           return token::VAR_STRING;
        /*{$variable_string,VAR_STRING}*/
      case type_array:       {
        Variable<VarArray>::ptr vararray( 
          boost::dynamic_pointer_cast<Variable<VarArray> >(var));
        VarArray::ptr array (vararray->Pointer());
        switch(array->Type()) {
          default:
            GB_driver.err_print("Array type not available \n");
        }
        break;
      }
      default:
        GB_driver.err_print("Variable type still not available \n");
        GB_driver.var_stack.GetLastBasicVar();
    }

  }

  yylval->ident = new IdentifierInfo;
  yylval->ident->SetName( varname);
  yylval->ident->SetCreationContext(context);
  return(token::IDENTIFIER);
}

/*** Additional Code ***/

namespace yyip {

Scanner::Scanner(std::istream* in,
     std::ostream* out)
    : yyipFlexLexer(in, out)
{
}

Scanner::~Scanner()
{
}

void Scanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

}


/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int yyipFlexLexer::yylex()
{
    std::cerr << "in yyipFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

/*
int yyFlexLexer::yywrap()
{
    return 1;
}
*/








